#!/bin/bash
set -e

# User setup
github_user="scallister"
ssh_dir_path="${HOME}/.ssh"
ssh_config_path="${HOME}/.ssh/config"
public_key_url="https://github.com/${github_user}.keys"
public_ssh_path="${HOME}/.ssh/id_rsa_personal.pub"
private_ssh_path="${HOME}/.ssh/id_rsa_personal"
# Repo paths
src_path="${HOME}/src/scallister"
init_repo_path="${src_path}/init"
dotfile_repo_path="${src_path}/dotfiles"
personal_dotfile_repo_path="${src_path}/dotfiles_personal"

function box_out()
{
  local s="$*"
  tput setaf 3
  echo " -${s//?/-}-
| ${s//?/ } |
| $(tput setaf 4)$s$(tput setaf 3) |
| ${s//?/ } |
 -${s//?/-}-"
  tput sgr 0
}

if [[ ! -s ${ssh_config_path} ]]; then
  mkdir -p ${ssh_dir_path}
  chmod 700 ${ssh_dir_path}
  echo "
# GitLab.com server
# The key fingerprint is: bd:3a:a8:ea:87:14:ca:4e:3c:5d:1e:83:05:e7:05:cd 
Host gitlab.com github.com .ninja *
PubkeyAuthentication yes
identityfile ~/.ssh/id_rsa_personal
" > ${ssh_config_path}
  chmod 755 ${ssh_config_path}
fi

function get_ssh_keys {
echo
echo "Downloading public ssh key from ${public_key_url}"
curl --silent ${public_key_url} > ${public_ssh_path}
chmod 644 ${public_ssh_path}
echo

# Create private SSH key if we need to
if [[ ! -s ${private_ssh_path} ]]; then
  touch -a ${private_ssh_path}
  chmod 600 ${private_ssh_path}
  echo "${private_ssh_path} is empty" 
  echo Paste private key into vim:
  sleep 2
  vim ${private_ssh_path}
fi


# Ensure agent is running
ssh-add -l &>/dev/null
if [ "$?" == 2 ]; then
    # Could not open a connection to your authentication agent.

    # Load stored agent connection info.
    test -r ~/.ssh-agent && \
        eval "$(<~/.ssh-agent)" >/dev/null

    ssh-add -l &>/dev/null
    if [ "$?" == 2 ]; then
        # Start agent and store agent connection info.
        (umask 066; ssh-agent > ~/.ssh-agent)
        eval "$(<~/.ssh-agent)" >/dev/null
    fi
fi
# Load key if needed
ssh-add -l | grep -i id_rsa || ssh-add ${private_ssh_path}
}

function clone_dotfiles {
  mkdir -p ${HOME}/src/${github_user}
  if [[ ! -d ${init_repo_path} ]]; then
    git clone git@github.com:${github_user}/init.git ${init_repo_path}
  fi
  if [[ ! -d ${dotfile_repo_path} ]]; then
    git clone git@github.com:${github_user}/dotfiles.git ${dotfile_repo_path}
  fi
  if [[ ! -d ${personal_dotfile_repo_path} ]] && hostname | grep -i "ninja$\|penguin$" > /dev/null; then
    git clone git@github.com:${github_user}/dotfiles_personal.git ${personal_dotfile_repo_path}
  else
    echo "Skipping dotfiles_personal, hostname does not end in ninja"
    echo ""
    echo "To clone dotfiles_personal still, run:"
    echo "git clone git@github.com:scallister/dotfiles_personal.git ${personal_dotfile_repo_path}"
  fi
}

function link_dotfile_install_scripts {
    mkdir -p ${HOME}/bin
    if [ ! -h ${HOME}/bin/dotfile_install.sh ]
    then
        echo 'Linking dotfile_install.sh in ~/bin'
        ln -s ${init_repo_path}/scripts/dotfile_install.sh ${HOME}/bin/dotfile_install.sh
    fi
    if [ ! -h ${HOME}/bin/dotfile_uninstall.sh ]
    then
        echo 'Linking dotfile_uninstall.sh in ~/bin'
        ln -s ${init_repo_path}/scripts/dotfile_uninstall.sh ${HOME}/bin/dotfile_uninstall.sh
    fi
}


get_ssh_keys &&
clone_dotfiles &&
link_dotfile_install_scripts

box_out "Initialized and ready to run setup in ${HOME}/src/${github_user}"
